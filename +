var groups;
var items;
var renderTimeline = function() {
  var data = Resources.find().map(function(res) {
    return {content: res.name, id: res._id, value: res.name, className: res._id}
  });
  items = Entries.find().map(function(entry){
    console.log(entry);
    return [];
  });
  groups = new vis.DataSet(data);
  // create visualization
  var container = document.getElementById('timeline-chart');
  var options = {
    // option groupOrder can be a property name or a sort function
    // the sort function must compare two groups and return a value
    //     > 0 when a > b
    //     < 0 when a < b
    //       0 when a == b
    groupOrder: function (a, b) {
      return a.value - b.value;
    },
    groupOrderSwap: function (a, b, groups) {
    	var v = a.value;
    	a.value = b.value;
    	b.value = v;
    },
    orientation: 'top',
    editable: true,
    groupEditable: true,
    start: new Date(2015, 6, 1),
    end: new Date(2015, 10, 1)
  };
  var timeline = new vis.Timeline(container);
  timeline.setOptions(options);
  timeline.setGroups(groups);
  timeline.setItems(items);

};

Template.timeline.events({

});

Template.timeline.onCreated(function() {
  self = this;
  
  Resources.find().observeChanges({
    added: function (id, fields) {
    },
    changed: function(id, fields) {
      groups.update({id: id, content: fields.name, value: fields.name, className: id});
    },
    removed: function (id) {
    }
  });
})

Template.timeline.onRendered(function() {
  FlowRouter.subsReady("resources", function() {
    renderTimeline();
  });
  FlowRouter.subsReady("entries", function() {
    console.log('stuff');
  })
});
